(+ 1 2)
(+ (- 1 2) (* 3 4))
(length (list 1 2 3))
(car (list 1 2 3))
(cdr (list 1 2 3))
(define x 10)
x
(+ x 2)
(begin (define pi 3.14) (* 2 (* pi pi)))
(cons 3 (list 1 2))
(define rest (cdr (list (quote a) (quote b) (quote c))))
rest
(if (null? (cdr (list 1 2))) (quote vazio) (quote (nao vazio)))
(if (> (* 11 11) 120) (* 7 6) oops)
(define fatorial (lambda (n) (if (<= n 1) 1 (* n (fatorial (- n 1))))))
(define print_n (lambda (n) (n)))
(define maior_que_0 (lambda (n) (if (> n 0) (quote SIM) (quote NAO))))
(define fatorial (lambda (n) (if (<= n 1) 1 (* n (fatorial (- n 1))))))
(define imposto (lambda (taxa) (lambda (val) (* val taxa))))
(define icms (imposto 0.18))
(icms 100)
(define range (lambda (ini fim) (if (= ini fim) (quote ) (cons ini (range (+ ini 1) fim)))))
(define map (lambda (f L) (if L (cons (f (car L)) (map f (cdr L))) (quote ))))
(define quadrado (lambda (x) (* x x)))
(map (lambda (n) (* n n)) (range 0 10))

(define filter
    (lambda (condicao lista)
        (if (= (length lista) 0)
            (quote ())
            (if (condicao (car lista))
                (list (car lista) (filter condicao (cdr lista)))
                (filter condicao (cdr lista))
            )
        )
    )
)

(define filter (lambda (condicao lista) (if (= (length lista) 0) (quote ()) if (condicao (car lista)) (list (car lista) (filter condicao (cdr lista))) (filter condicao (cdr lista))))))


(define ehPar (lambda (x) (if (= (% x 2) 0) true false)))
