(+ 1 2)
(+ (- 1 2) (* 3 4))
(length (list 1 2 3))
(car (list 1 2 3))
(cdr (list 1 2 3))
(define x 10)
x
(+ x 2)
(begin (define pi 3.14) (* 2 (* pi pi)))
(cons 3 (list 1 2))
(define rest (cdr (list (quote a) (quote b) (quote c))))
rest
(if (null? (cdr (list 1 2))) (quote vazio) (quote (nao vazio)))
(if (> (* 11 11) 120) (* 7 6) oops)
(define fatorial (lambda (n) (if (<= n 1) 1 (* n (fatorial (- n 1))))))
(define print_n (lambda (n) (n)))
(define maior_que_0 (lambda (n) (if (> n 0) (quote SIM) (quote NAO))))
(define fatorial (lambda (n) (if (<= n 1) 1 (* n (fatorial (- n 1))))))
(define imposto (lambda (taxa) (lambda (val) (* val taxa))))
(define icms (imposto 0.18))
(icms 100)
