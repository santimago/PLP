1)
  Funções anônimas:
    São funções que não possuem um identificador, ou um 'nome'. São usadas em geral como
    argumentos passados para funções de alta ordem:

        map(lambda x : x*x, [1,2,3,4,5])

    ou como elemento de construção de funções de alta ordem que precisam retornar
    funções como argumento:

        def getPotencia(potencia):
            return lambda x : x ** 2

  Avaliação preguiçosa:
    É a avalição ou execução de procedimentos sobre subconjuntos de uma coleção,
    é utilizada quando o procedimento sobre toda a coleção pode não ser necessário,
    poupando tempo de execução. Em python utiliza o conceito de geradores ou
    iteradores:

        primo = lambda n : True not in (n%k == 0 for k in xrange(2,n))

    A funcao primo avalia o resultado de n%k == 0 para cada k em xrange(2,n)
    sem aguardar a geração da lista completa, quando um termo True
    é encontrado, a expressão inteira é avaliada para false e retorna seu valor,
    sem terminar de consumir o restante da coleção.

  Recursão:
    É um conceito matemático e computacional que se ao fato da definição de uma
    entidade ser encerrada em si mesma. Exemplo de tais entidades são os geométricos
    fractais ou os conjuntos numéricos como os Fatoriais e a sequência de Fibonacci.
    Ao final, boa parte das estruturas de dados computacionais utilizam algoritmos
    recursivos, como listas e árvores.

  Funções puras:
    O conceito de função pura está associado a definição matemática de função da forma
    y = f(x). Neste contexto uma função f que recebe como argumento x, sempre resolve
    para y, independente do estado do sistema onde está incluída e em contrapartida
    não altera de forma transparente o sistema quando é aplicada.
    Em computação, uma função que altera o valor de seus argumentos passados por
    referência, ou altera/utiliza variáveis 'globais' mutáveis em sua computação é
    inerentemente impura.

  Efeito colateral:
    Em geral a expressão 'efeito colateral' refere-se à eventos ou procedimentos
    que produzem efeitos indiretos ou implícitos em um sistema. Uma função que
    altera valores passados por referência ou globais produz efeitos colaterais
    pois essas alterações independem de seu retorno e são transparentes à entidade
    que a chama.

  Iteradores:
    Iteradores são objetos que consomem coleções. Em geral são implementados
    através de um método next() que retorna o próximo elemento da coleção.

  Geradores:
    Geradores por sua vez, são tipos especiais de iteradores que não apenas iteram
    sob a coleção, mas também as produzem dinamicamente. São utilizados em algumas
    linguagens de programação para implementar avaliações preguiçosas.
    Quando o método next() é invocado em um gerador, ele produz o elemento correspondente
    e então o retorna.


2)
    Linguagens funcionais são fundamentadas no conceito de transparência
      referencial e possuem poucos ou nenhum estado compartilhado, o que implica
      em cada sub-expressão poder ser avaliada em paralelo pela máquina, assim
      que seus componentes se tornam conhecidos. Exemplos são as funções map,
      reduce e filter, em Python.
